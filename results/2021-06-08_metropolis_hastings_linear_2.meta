// 1. Problem spcifications////
///////////////////////////////

std::string name_suffix = "2";

// dimension - number of decision variables
const std::size_t n{2};
// number of inequalitiy constraints
const std::size_t m{2};
// number of equality constraints
const std::size_t l{0};

// method to for sampling
// {"Biased", "slack", "metropolis_hastings"}
const std::string method{"metropolis_hastings"};

// lower bounds
const std::vector<double> lb{0,0};
// upper bounds
const std::vector<double> ub{2,2};

// linear constraint coefficients
// c.T@x - b

const double cs[m][n] ={ 
    {-1,-1},
    {1,1}};
const double bs[m]{-1,2};
std::vector<double> c{-1,-1};
double b{-1};

std::vector<double> c2{1,1};
double b2{2};


////////////////////
// 1.2 MH settings//
////////////////////

const std::string proposal_sampler{"uniform"};
std::vector<double> widths{1,1};

////////////////////
// 2. Simulations///
////////////////////

// number of samples
const int n_iter{1000};


////////////////////
// 3. Evaluation ///
////////////////////

// bandwidth estimator {"silverman", "scott"}
const std::string band_est{"silverman"};
// grid spacing
const double step{0.05};



